#include <iostream>
#include <deque>

using namespace std;
int arr[200 + 2][200 +2];
int dx[4] = { 0, 0, 1, -1 }; int dy[4] = { 1, -1, 0, 0 };
int X = 1, Y = 1;
int S = 0; int cnt[400]; int t = 0;
deque <pair<int, pair<int,int>>> Q;

int vicinity_min(int x, int y)
{
	int min = 9999;
	for (int i = 0; i < 4; i++)
		if ((arr[x + dx[i]][y + dy[i]] < min) && (arr[x+dx[i]][y+dy[i]] != 0))
			min = arr[x + dx[i]][y + dy[i]];
	return min;
}
void func()
{
	while (cnt[t] > 0)
	{
		if(Q.size() ==0) break; //fix error - Runtime(DoubleFree)
		int x = Q.front().first;
		int y = Q.front().second.first;
		Q.pop_front(); cnt[t]--;
		for (int i = 0; i < 4; i++)
		{
			if (arr[x + dx[i]][y + dy[i]] == 0) {
				Q.push_back(make_pair(x + dx[i], make_pair(y + dy[i], vicinity_min(x + dx[i], y + dy[i]))));
				cnt[t + 1]++;
			}
		}
	}
	if (cnt[t] == 0) { //renew arr by Q value
		int i = 0;
		while (i < Q.size())
		{
			arr[Q[i].first][Q[i].second.first] = Q[i].second.second;
			i++;
		}
	}
	t++;
}
void set()
{
	int N, K;
	cin >> N >> K;
	for (int i = 1; i <= N; i++)
		for (int j = 1; j <= N; j++)
		{
			cin >> arr[i][j];
			if (arr[i][j] != 0)
			{
				Q.push_back(make_pair(i, make_pair(j,arr[i][j]))); cnt[0]++;
			}
		}
	// 2-dimension array setting
	for (int i = 0; i < N + 2; i++) arr[i][0] = 9999;
	for (int i = 0; i < N + 2; i++) arr[0][i] = 9999;
	for (int i = 0; i < N + 2; i++) arr[N + 1][i] = 9999;
	for (int i = 0; i < N + 2; i++) arr[i][N + 1] = 9999;
	cin >> S >> X >> Y;
}
int main()
{
	set();
	while (S != t)
		func();

	if (arr[X][Y] != 0) cout << arr[X][Y];
	else cout << "0";
	return 0;
	/* for test
	cout << "\n" ;
	for (int i = 1; i < 5 + 1; i++)
	{
		for (int j = 1; j < 5 + 1; j++)
		{
			cout << arr[i][j] << " ";
		}
		cout << "\n";
	}
	*/
}
