#include <iostream>
#include <vector>
#include <algorithm>
#include <deque>
using namespace std;
bool can_simultaneous(vector <vector<int>>& vec, int x, int y) //premised arranged setting
{
	for (auto it = vec[x].begin(); it != vec[x].end(); it++)
		if (*it == y) 
			return false;
	return true;
}
int main()
{
	int N, M;
	int ans = 0;
	cin >> N >> M;
	vector <vector <int>> vec(M);
	for (int j = 0; j < M; j++)
	{
		int a, b;
		cin >> a >> b;
		vec[min(a,b)].push_back(max(a, b)); //marking
	}
	deque <int> Q;
	for (int i = 0; i <= N - 2; i++)
		Q.push_back(i); //initializing
	int depth = 1;
	while (!Q.empty())
	{
		if (Q.size() == 0) break;
		for (int p= Q.front() + 1; p <= N-2; p++)
		{
			if (can_simultaneous(vec,Q.front(), p))
			{
				vec[Q.front()].push_back(p); //similar visited array
				Q.push_front(p); 
				depth++;
				if (depth == 3) {
					ans++; 
					for (int k = 0; k < 2; k++)
					{
						Q.pop_front();
						depth--;
					}
				}
			}
		}
	}
	return 0;
}
