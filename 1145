#include <iostream>
#include <vector>
using namespace std;

int main()
{
	int N = 5;
	int* arr = new int[N];
	for (int i = 0; i < N; i++)
		cin >> arr[i];
	for (int gcd = 2; gcd < 1000000; gcd++)
	{
		int cnt = 0;
		vector <int> vec;
		for (int i = 0; i < N; i++)
		{
			if (!(gcd % arr[i]))
			{
				cnt++;
				vec.push_back(i);
			}
		}
		if (cnt >= (int)(N / 2) + 1)
		{
			cout << gcd << "\n";
			for(auto it = vec.begin(); it != vec.end(); it++)
			{
				cout << arr[*it] << "\n";			
			}
			break;
		}
	}
	return 0;
}
// 관점의 차이 : 최소 공배수를 배열의 원소 ((int)N/2 + 1) 개에서 택하여 min(기존의 최소공배수,현재의 최소공배수)를 택하는 O(2^n)의 풀이 VS 최대 공약수를 가정한(gcd) O(N)풀이
