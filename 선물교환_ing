#include <iostream>
#include <deque>
#include <vector>
#include <queue>
using namespace std;
int N;
deque <pair<int,int>> Q;
bool func(const vector <int>& vec)
{
	int* choice = new int[N]{}; //set '0' all elements
	for (auto i :vec)
	{
		choice[Q[i].first]++; // 'i'th person first pick
		choice[Q[i].second]++; // 'i'th person second pick
	}
	for (auto i : vec)
	{
		if (choice[i] != 2) //bcs participant must be voted '2'
			return false;
	}
	return true;
}
void fun(const int depth)
{
	int s = 0; int idx = 0, cnt = 0;
	bool* visited = new bool[N] {};
	int stack[1024]; // input order : cnt, idx
	stack[s++] = idx;
	stack[s++] = cnt;
	while (s > 0)
	{
		cnt = stack[--s];
		idx = stack[--s];
		if (cnt == depth) {
			vector <int> tmp_v;
			if(depth != 1)
				for (int i = 0; i <= (s-2); i+=2) //stack[0,2,4,..., (s-2)] have 'visited result = true' index
				{
					tmp_v.push_back(stack[i]);
				}
			//caution boundary. bcs popped idx at stack (idx = stack[--s])
			tmp_v.push_back(idx);
			if (func(tmp_v))
			{
				cout << depth;
				for (auto i : tmp_v)
					cout << i << " ";
			}
		}
		visited[idx] = false; // before visited place T->F. if index encounter threshold, second best index T->F
		for (int i = idx + 1; i < N; i++)
		{
			if (cnt < depth) 
			{
				visited[i] = true;
				stack[s++] = i;
				stack[s++] = cnt + 1;
				break;
			}
		}
	}
	return;
}
void setting(int& N)
{
	cin >> N;
	for (int i = 0; i < N; i++)
	{
		int a, b;
		cin >> a >> b;
		Q.push_back(make_pair(a, b));
	}
	return;
}
int main()
{
	setting(N);

	return 0;
}
