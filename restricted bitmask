  for(int i=0; ;i++)
  {
    //bit masking
			if (det & (1 << i)) //det means 'detecter'
			{
				if (1 & det) // for example 000001 & 101101 = 000001(2) -> 1(true)
				{
					int k = 1;  //(ex) 10011(2) -> k=2 , 10101(2) -> k=1
					while (det & (1 << (k - 1))) k++; // right side '1' amount = k
          if(k==x) //ending condition. for example 000111(2) -> x==3==k (final state) 
          {   
              if(function()) //for using this state
                count++;
              break;
          }
					int next_moving_idx;
					for(int i=1; ;i++)
              if( det & (1 <<(k + i)) )
              {
                  next_moving_idx = k+i;
                  break;
              }
          
					det = (int)(det / pow(2, (next_moving_idx - 1))) * (next_moving_idx - 1); // right clear , using quotient
					for (int i = 0; i < k; i++)
						det = det + pow(2, next_moving_idx - 1 - i); // for attach, '1' amount of right 
					//using phase
        }
				else 
        { 
          //basic state (ex) 11010(2) -> 11001(2)
					det &= (~(1 << i));//moving phase 1. (erasing)
					det |= (1 << (i - 1)); //moving phase 2. (inserting)
					//using phase
					if (function())
						count++;
          i=0; continue;
				}
      }    
    }
